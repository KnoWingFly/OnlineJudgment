#!/usr/bin/python3

import sys, signal, os, subprocess, logging
import re
from pathlib import Path
import time
import json

# Configure logging
LOG_FILE = 'judge.log'
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Constants
PROBLEMDIR = 'problems'
TIME_LIMIT = 100  # seconds
COMPILATION_TIME_LIMIT = 30  # seconds
MAX_OUTPUT_SIZE = 10 * 1024 * 1024  # 10MB

# Verdicts
VERDICT = {
    'CORRECT': 0,        # Accepted
    'COMPILE_ERROR': 1,  # Compile Error
    'WRONG': 2,         # Wrong Answer
    'TIME_EXCEEDED': 3,  # Time Limit
    'ILLEGAL_FILE': 4,  # Invalid File
    'RTE': 5           # Runtime Error
}

class SolutionWrapper:
    def __init__(self):
        self.templates = {
            'c': '''
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

{solution_code}

int main() {{
    int T;
    scanf("%d", &T);
    char marker[100];
    
    for(int t = 1; t <= T; t++) {{
        scanf(" %[^\\n]", marker);
        printf("%s\\n", marker);
        solve();
    }}
    return 0;
}}
''',
            'cpp': '''
#include <cstdio>
#include <iostream>
#include <string>
using namespace std;

{solution_code}

int main() {{
    int T;
    scanf("%d", &T);
    char marker[100];
    
    for(int t = 1; t <= T; t++) {{
        scanf(" %[^\\n]", marker);
        printf("%s\\n", marker);
        solve();
    }}
    return 0;
}}
''',
            'py': '''
import sys

{solution_code}
def main():
    # Read number of test cases
    T = int(input())
    
    # Process each test case
    for t in range(1, T + 1):
        # Read and echo case marker
        marker = input().strip()
        print(marker)
        
        # Call the solve function for this test case
        solve()

if __name__ == "__main__":
    main()
''',

'java': '''
import java.util.*;

{solution_code}

class Main {{
    public static void main(String[] args) {{
        Scanner scanner = new Scanner(System.in);
        try {{
            Solution.init(scanner);
            int T = scanner.nextInt();
            scanner.nextLine(); // Consume newline
            
            for(int t = 1; t <= T; t++) {{
                String marker = scanner.nextLine();
                System.out.println(marker);
                if (marker.startsWith("=== Case")) {{
                    Solution.solve();
                }}
            }}
        }} finally {{
            scanner.close();
        }}
    }}
}}
'''
        }

    def wrap_solution(self, source_path):
        """Wrap user's solution with appropriate template"""
        try:
            # Get absolute path
            abs_source_path = os.path.abspath(source_path)
            work_dir = os.path.dirname(abs_source_path)
            
            with open(abs_source_path, 'r') as f:
                user_code = f.read().strip()
            
            ext = source_path.split('.')[-1].lower()
            if ext not in self.templates:
                raise ValueError(f"Unsupported file extension: {ext}")

            # For Java, handle imports and class definitions
            if ext == 'java':
                # Split imports and actual code
                import_lines = []
                code_lines = []
                in_solution_class = False
                solution_code = []
                
                for line in user_code.split('\n'):
                    line_strip = line.strip()
                    if line_strip.startswith('import '):
                        import_lines.append(line)
                    elif line_strip.startswith('class Solution '):
                        in_solution_class = True
                    elif in_solution_class and line_strip.startswith('}'):
                        in_solution_class = False
                    elif in_solution_class and not line_strip.startswith('class Solution'):
                        solution_code.append(line)
                    else:
                        code_lines.append(line)
                
                # Reconstruct solution code without the class definition
                solution_code_without_class = '\n'.join(solution_code)
                
                # Add user imports to template imports
                template = self.templates[ext]
                if import_lines:
                    # Insert user imports after template imports
                    template_parts = template.split('\n', 1)
                    template = template_parts[0] + '\n' + '\n'.join(import_lines) + '\n' + template_parts[1]

                # Create wrapped code
                wrapped_code = template.format(
                    solution_code=user_code,
                    solution_code_without_class=solution_code_without_class
                )
            else:
                template = self.templates[ext]
                wrapped_code = template.format(
                    solution_code=user_code
                )
            
            # For Java, always save as Main.java
            if ext == 'java':
                output_path = os.path.join(work_dir, "Main.java")
            else:
                output_path = os.path.join(work_dir, f"{os.path.splitext(os.path.basename(source_path))[0]}_wrapped.{ext}")
            
            with open(output_path, 'w') as f:
                f.write(wrapped_code)
                
            return output_path
        except Exception as e:
            logging.debug(f"Error wrapping solution: {str(e)}")
            return None

def debug(msg):
    """Log debug messages"""
    logging.debug(msg)
    print(msg, file=sys.stderr)

def run_solution(executable_path, infile, outfile, sourcefile=None):
    """Run the compiled solution"""
    try:
        debug(f"Starting solution execution with sourcefile: {sourcefile}")
        start_time = time.time()
        
        # Verify input file exists and is readable
        if not os.path.isfile(infile):
            debug(f"Input file not found: {infile}")
            return False, 0
        
        # Get work directory from source file
        if sourcefile:
            work_dir = os.path.dirname(os.path.abspath(sourcefile))
        else:
            work_dir = os.path.dirname(executable_path) if executable_path else os.getcwd()
        
        debug(f"Working directory: {work_dir}")
        
        with open(infile, 'r') as fin, open(outfile, 'w') as fout:
            # For Python files, we need to use the wrapped file
            if sourcefile and sourcefile.endswith('.py'):
                base_name = os.path.splitext(os.path.basename(sourcefile))[0]
                wrapped_file = os.path.join(work_dir, f"{base_name}_wrapped.py")
                debug(f"Looking for wrapped file at: {wrapped_file}")
                if not os.path.exists(wrapped_file):
                    debug(f"Wrapped Python file not found: {wrapped_file}")
                    return False, 0
                cmd = ["python3", wrapped_file]
            elif sourcefile and sourcefile.endswith('.java'):
                cmd = ["java", "-cp", work_dir, "Main"]
            elif executable_path:
                cmd = [executable_path]
            else:
                debug("No valid command could be determined")
                return False, 0
                
            debug(f"Running command: {' '.join(cmd)}")
            process = subprocess.run(
                cmd,
                stdin=fin,
                stdout=fout,
                stderr=subprocess.PIPE,
                timeout=TIME_LIMIT,
                text=True,
                cwd=work_dir
            )
            
        execution_time = time.time() - start_time
        debug(f"Execution completed in {execution_time:.3f} seconds")
        
        if process.returncode != 0:
            debug(f"Runtime error: {process.stderr}")
            return False, execution_time
            
        return True, execution_time
        
    except subprocess.TimeoutExpired:
        debug("Time limit exceeded")
        return False, TIME_LIMIT
    except Exception as e:
        debug(f"Runtime error: {str(e)}")
        return False, 0

def compile_code(sourcefile, ext):
    """Compile the submitted code"""
    try:
        debug(f"Starting compilation of {sourcefile}")
        
        # Create solution wrapper and wrap the code
        wrapper = SolutionWrapper()
        wrapped_file = wrapper.wrap_solution(sourcefile)
        
        if not wrapped_file:
            debug("Failed to wrap solution code")
            return False, None
            
        # Get absolute paths
        source_path = os.path.abspath(wrapped_file)
        work_dir = os.path.dirname(source_path)
        
        if ext == "py":
            try:
                # For Python, we just check syntax and return the wrapped file path
                subprocess.run(["python3", "-m", "py_compile", source_path], 
                             check=True, capture_output=True, timeout=10)
                return True, source_path  # Return the wrapped file path
            except subprocess.CalledProcessError as e:
                debug(f"Python syntax error: {e.stderr}")
                if os.path.exists(wrapped_file):
                    os.remove(wrapped_file)
                return False, None
        
        # Rest of the compilation logic for other languages...
        output_path = os.path.join(work_dir, "a.out")
        
        if ext == "cpp":
            cmd = ["g++", "-Wall", "-O2", "-std=c++17", source_path, "-o", output_path]
        elif ext == "c":
            cmd = ["gcc", "-Wall", "-O2", "-std=c11", source_path, "-o", output_path]
        elif ext == "java":
            cmd = ["javac", source_path]
            output_path = os.path.join(work_dir, "Main.class")
        elif ext == "go":
            cmd = ["go", "build", "-o", output_path, source_path]
        else:
            debug(f"Unsupported file extension: {ext}")
            if os.path.exists(wrapped_file):
                os.remove(wrapped_file)
            return False, None

        debug(f"Running compilation command: {' '.join(cmd)}")
        result = subprocess.run(cmd, 
                              capture_output=True, 
                              text=True, 
                              timeout=COMPILATION_TIME_LIMIT,
                              cwd=work_dir)
        
        if result.returncode != 0:
            debug(f"Compilation failed with error:\n{result.stderr}")
            if os.path.exists(wrapped_file):
                os.remove(wrapped_file)
            return False, None
        
        return True, output_path
        
    except subprocess.TimeoutExpired:
        debug("Compilation timed out")
        if os.path.exists(wrapped_file):
            os.remove(wrapped_file)
        return False, None
    except Exception as e:
        debug(f"Compilation error: {str(e)}")
        if os.path.exists(wrapped_file):
            os.remove(wrapped_file)
        return False, None

# def run_solution(executable_path, infile, outfile, sourcefile=None):
#     """Run the compiled solution"""
#     try:
#         debug(f"Starting solution execution with sourcefile: {sourcefile}")
#         start_time = time.time()
        
#         # Verify input file exists and is readable
#         if not os.path.isfile(infile):
#             debug(f"Input file not found: {infile}")
#             return False, 0
        
#         # Get work directory
#         work_dir = os.path.dirname(sourcefile) if sourcefile else os.getcwd()
        
#         with open(infile, 'r') as fin, open(outfile, 'w') as fout:
#             # For Python files, we need to use the wrapped file
#             if sourcefile and sourcefile.endswith('.py'):
#                 wrapped_file = sourcefile.replace('.py', '_wrapped.py')
#                 if not os.path.exists(wrapped_file):
#                     debug(f"Wrapped Python file not found: {wrapped_file}")
#                     return False, 0
#                 cmd = ["python3", wrapped_file]
#             elif sourcefile and sourcefile.endswith('.java'):
#                 cmd = ["java", "-cp", work_dir, "Main"]
#             elif executable_path:
#                 cmd = [executable_path]
#             else:
#                 debug("No valid command could be determined")
#                 return False, 0
                
#             debug(f"Running command: {' '.join(cmd)}")
#             process = subprocess.run(
#                 cmd,
#                 stdin=fin,
#                 stdout=fout,
#                 stderr=subprocess.PIPE,
#                 timeout=TIME_LIMIT,
#                 text=True,
#                 cwd=work_dir
#             )
            
#         execution_time = time.time() - start_time
#         debug(f"Execution completed in {execution_time:.3f} seconds")
        
#         if process.returncode != 0:
#             debug(f"Runtime error: {process.stderr}")
#             return False, execution_time
            
#         return True, execution_time
        
#     except subprocess.TimeoutExpired:
#         debug("Time limit exceeded")
#         return False, TIME_LIMIT
#     except Exception as e:
#         debug(f"Runtime error: {str(e)}")
#         return False, 0

def compare_output(output_file, expected_file, input_file):
    """
    Compare output with expected result and return detailed comparison results
    
    Args:
        output_file (str): Path to the actual output file
        expected_file (str): Path to the expected output file
        input_file (str): Path to the input file
    
    Returns:
        tuple: (is_correct, comparison_result)
    """
    try:
        debug("Starting output comparison")
        if not os.path.exists(output_file):
            debug(f"Output file not found: {output_file}")
            return False, {
                'status': 'error',
                'message': 'Output file not found',
                'is_correct': False,
                'verdict': 'Runtime Error'
            }
        if not os.path.exists(expected_file):
            debug(f"Expected output file not found: {expected_file}")
            return False, {
                'status': 'error',
                'message': 'Expected output file not found',
                'is_correct': False,
                'verdict': 'Runtime Error'
            }

        # Read all files
        with open(input_file, 'r') as f:
            input_content = f.read()
        with open(output_file, 'r') as f:
            actual_output = f.read()
        with open(expected_file, 'r') as f:
            expected_output = f.read()

        # Split into lines and filter empty lines
        actual_lines = [line.strip() for line in actual_output.splitlines() if line.strip()]
        expected_lines = [line.strip() for line in expected_output.splitlines() if line.strip()]
        
        if actual_lines != expected_lines:
            # Find first difference
            case_num = 1
            case_input = []
            for i, (exp_line, act_line) in enumerate(zip(expected_lines + [''], actual_lines + [''])):
                if exp_line != act_line:
                    break
                if exp_line.startswith('=== Case'):
                    case_num = int(exp_line.split()[2])
                    case_input = []
                else:
                    case_input.append(exp_line)

            return False, {
                'status': 'wrong_answer',
                'case_number': case_num,
                'input': input_content,
                'expected': expected_output,
                'actual': actual_output,
                'is_correct': False,
                'message': f"Wrong answer in test case {case_num}",
                'verdict': 'Wrong Answer'
            }

        return True, {
            'status': 'accepted',
            'input': input_content,
            'expected': expected_output,
            'actual': actual_output,
            'is_correct': True,
            'message': "All test cases passed",
            'verdict': 'Accepted'
        }

    except Exception as e:
        debug(f"Error during comparison: {str(e)}")
        return False, {
            'status': 'error',
            'message': f"Comparison error: {str(e)}",
            'is_correct': False,
            'verdict': 'Runtime Error'
        }

def main():
    executable_path = None
    output_file = None
    try:
        debug("Judge script started")
        if len(sys.argv) != 3:
            debug("Usage: ./onj <sourcefile> <problem>")
            print(json.dumps({
                'status': 'error',
                'verdict': 'Invalid File',
                'message': 'Invalid number of arguments'
            }))
            sys.exit(VERDICT['ILLEGAL_FILE'])

        sourcefile = sys.argv[1]
        problem = sys.argv[2]
        debug(f"Processing submission: {sourcefile} for problem {problem}")
        
        # Validate file exists
        if not os.path.isfile(sourcefile):
            debug(f"Source file not found: {sourcefile}")
            print(json.dumps({
                'status': 'error',
                'verdict': 'Invalid File',
                'message': 'Source file not found'
            }))
            sys.exit(VERDICT['ILLEGAL_FILE'])

        # Get file extension
        ext = sourcefile.split(".")[-1].lower()
        if ext not in ["c", "cpp", "py", "java", "go"]:
            debug(f"Unsupported file extension: {ext}")
            print(json.dumps({
                'status': 'error',
                'verdict': 'Invalid File',
                'message': 'Unsupported file extension'
            }))
            sys.exit(VERDICT['ILLEGAL_FILE'])

        # Check problem files exist
        infile = os.path.abspath(f"{PROBLEMDIR}/{problem}/in")
        expected_file = os.path.abspath(f"{PROBLEMDIR}/{problem}/out")
        if not os.path.isfile(infile) or not os.path.isfile(expected_file):
            debug("Problem input/output files not found")
            print(json.dumps({
                'status': 'error',
                'verdict': 'Invalid File',
                'message': 'Problem files not found'
            }))
            sys.exit(VERDICT['ILLEGAL_FILE'])

        # Compile if needed
        success, executable_path = compile_code(sourcefile, ext)
        if not success:
            print(json.dumps({
                'status': 'error',
                'verdict': 'Compile Error',
                'message': 'Compilation failed'
            }))
            sys.exit(VERDICT['COMPILE_ERROR'])

        # Prepare for execution
        work_dir = os.path.dirname(os.path.abspath(sourcefile))
        output_file = os.path.join(work_dir, "output.txt")
        
        # Run solution
        success, execution_time = run_solution(executable_path, infile, output_file, sourcefile)
        if not success:
            if execution_time >= TIME_LIMIT:
                print(json.dumps({
                    'status': 'error',
                    'verdict': 'Time Limit Exceeded',
                    'execution_time': execution_time,
                    'message': f'Time limit exceeded ({execution_time:.3f} seconds)'
                }))
                sys.exit(VERDICT['TIME_EXCEEDED'])
            print(json.dumps({
                'status': 'error',
                'verdict': 'Runtime Error',
                'execution_time': execution_time,
                'message': 'Runtime error occurred'
            }))
            sys.exit(VERDICT['RTE'])

        # Compare output and get details
        success, comparison_result = compare_output(output_file, expected_file, infile)
        
        # Add execution time to result
        comparison_result['execution_time'] = execution_time
        
        # Print the JSON result
        print(json.dumps(comparison_result))
        
        if success:
            sys.exit(VERDICT['CORRECT'])
        else:
            sys.exit(VERDICT['WRONG'])

    except Exception as e:
        debug(f"Unexpected error: {str(e)}")
        print(json.dumps({
            'status': 'error',
            'verdict': 'Runtime Error',
            'message': str(e)
        }))
        sys.exit(VERDICT['RTE'])
    finally:
        # Cleanup
        try:
            if executable_path and os.path.exists(executable_path):
                os.remove(executable_path)
            if output_file and os.path.exists(output_file):
                os.remove(output_file)
        except Exception as e:
            debug(f"Cleanup error: {str(e)}")
            pass

if __name__ == "__main__":
    main()